let arr = [
    [
        "DRIVER LICENSE",
        "USA",
        "CLASS D\nChO NONE\n12 REST NONE",
        "wOLN D34107622\n008 06/13/1999",
        "SUSAN\nMORGAN LINDSEY\n7CALVERTON PL\nPHOENA, AZ 95016-3457",
        "EXP 06/13/2042 i8s 06/02\nSEX P KEES RN\n1s HGT 5 43 1s MAUR BRO\n17 WOT 3",
        "06/13/99",
        "fon",
        "00 1725CAz4PI0D"
    ],[
        "LizOnL",
        "DRIVER LICENSE",
        "USA",
        "9 CLASSD",
        "9a END NONE\n12 REST NONE",
        "s DLN DO7350363\n3 DoB 02/26/1988",
        "1 JOHNSON\nNICHOLAS PATRICK",
        "1410 E FAIRVIEW ST\nCHANDLER, AZ 85225-2035",
        "4 EXP 01/15/2028 Iss 01/15/2020",
        "15 SEX M 18 EYES BRO\n16 HGT 5-08\" 19 HAIR BLK\n17 WGT 170 lb",
        "02/26/88",
        "DONOR",
        "s DD 1352E3794J1241N8"
    ],[
        "HilzoLa",
        "DRIVER LICENSE",
        "USA",
        "CLASSD\nEND NONE\n12 REST NONE\nKELLYY\nGARCIA\n245 MAIN STREET\nPHOENDX, AZ 85254",
        "DLN D12345678\na DoB 02/01/1987",
        "EXP 02/10/2052 15s 02/10/2003\n15 SEX F\n16 HOT 508\n17 WOT 125 Ib",
        "B EYES BLU\n19 HAIR BRO",
        "02/01/87",
        "DONOR\nSDD 1234567890123456"
    ],[
        "LizZOnL DRIVER LICENSE",
        "USA",
        "NOT FOR FEDERAL IDENTIFICATION",
        "9 CLASSSD\n9a END NONE\n12 REST NONE",
        "DLN D09257418\nDOB 02/01/1995",
        "1 ADAMS\n2 IDINSTATE MIDDLE",
        "8 2149 LAKEWOOD DRIVE\nPRESCOTT, AZ 86301-5471",
        "4EXP 02/01/20311Ss 10/142016",
        "15 SEX F",
        "18 EYESBLU",
        "16 HGT 5-03\" 19 HAIR BLN\n17 WGT 135 Ib",
        "02/01/95",
        "TAundat",
        "s DD 1357c8169E1226J2"
    ],[
        "Hizona",
        "DRIVER LICENSE",
        "USA",
        "9 CLASSD",
        "ad DLN D12345678\n3 DOB 02/01/1957",
        "9a END",
        "NONE",
        "12 REST NONE",
        "LAST NAME\n2 FIRST NAME",
        "8",
        "4b EXP 04/01/2023 4a 1s 03/01/2018\nVETERA",
        "16 17 HGT 5-08\" 19 HAIR BRO ETERAN",
        "15 SEX M",
        "18 EYES BRO",
        "17 WGT 185 Ib",
        "02/01/57",
        "DONOR",
        "Sieynature",
        "5 DD 1234567890123456"
    ]
]

let cities = [
  "Ajo",
  "Amado",
  "Apache Junction",
  "Arizona City",
  "Ash Fork",
  "Avondale",
  "Bagdad",
  "Benson",
  "Bisbee",
  "Black Canyon City",
  "Bouse",
  "Buckeye",
  "Bullhead City",
  "Cameron",
  "Camp Verde",
  "Carefree",
  "Casa Grande",
  "Catalina",
  "Cave Creek",
  "Chandler",
  "Chinle",
  "Chino Valley",
  "Cibecue",
  "Clarkdale",
  "Claypool",
  "Clifton",
  "Colorado City",
  "Congress",
  "Coolidge",
  "Cornville",
  "Cottonwood",
  "Dennehotso",
  "Dolan Springs",
  "Douglas",
  "Duncan",
  "Eagar",
  "Ehrenberg",
  "El Mirage",
  "Elgin",
  "Eloy",
  "Flagstaff",
  "Florence",
  "Fort Defiance",
  "Fountain Hills",
  "Fredonia",
  "Gadsden",
  "Ganado",
  "Gila Bend",
  "Gilbert",
  "Glendale",
  "Globe",
  "Golden Valley",
  "Goodyear",
  "Green Valley",
  "Hayden",
  "Holbrook",
  "Houck",
  "Huachuca City",
  "Jerome",
  "Kaibito",
  "Kayenta",
  "Keams Canyon",
  "Kearny",
  "Kingman",
  "Kykotsmovi Village",
  "Lake Havasu City",
  "Lake Montezuma",
  "Leupp",
  "Litchfield Park",
  "Lukachukai",
  "Mammoth",
  "Many Farms",
  "Marana",
  "Maricopa",
  "Mcnary",
  "Mesa",
  "Miami",
  "Mohave Valley",
  "Morenci",
  "Munds Park",
  "Naco",
  "Nazlini",
  "New River",
  "Nogales",
  "Oracle",
  "Page",
  "Paradise Valley",
  "Parker",
  "Parks",
  "Patagonia",
  "Paulden",
  "Payson",
  "Peach Springs",
  "Peoria",
  "Peridot",
  "Phoenix",
  "Pima",
  "Pine",
  "Pinon",
  "Pirtleville",
  "Prescott Valley",
  "Prescott",
  "Quartzsite",
  "Queen Creek",
  "Rio Verde",
  "Rock Point",
  "Round Rock",
  "Sacaton",
  "Safford",
  "Sahuarita",
  "Salome",
  "San Carlos",
  "San Luis",
  "San Manuel",
  "Scottsdale",
  "Second Mesa",
  "Sedona",
  "Seligman",
  "Sells",
  "Shonto",
  "Show Low",
  "Sierra Vista",
  "Snowflake",
  "Somerton",
  "Sonoita",
  "Springerville",
  "Stanfield",
  "Sun City West",
  "Sun City",
  "Sun Valley",
  "Superior",
  "Surprise",
  "Tacna",
  "Taylor",
  "Teec Nos Pos",
  "Tempe",
  "Thatcher",
  "Tolleson",
  "Tombstone",
  "Tonalea",
  "Tonto Basin",
  "Tsaile",
  "Tuba City",
  "Tubac",
  "Tucson",
  "Vail",
  "Wellton",
  "Wenden",
  "Whiteriver",
  "Wickenburg",
  "Willcox",
  "Williams",
  "Window Rock",
  "Winkelman",
  "Winslow",
  "Yarnell",
  "Young",
  "Youngtown",
  "Yuma"
]

  const getcityname = rawcityname => {
    // console.log(rawcityname);
    let matchedchars = '',
      CITY = '',
      matchedcities,
      wordcount = rawcityname.trim().split(' ').length,
      lastmatchedcities;
    rawcityname
      .toLowerCase()
      .split('')
      .forEach((c, i) => {
        matchedchars += c;
        let rgx = new RegExp('^' + matchedchars);
        matchedcities = cities.filter(
          x =>
            rgx.test(x.toLowerCase()) &&
            x.toLowerCase().trim().split(' ').length == wordcount,
        );
        console.log(matchedcities)
        if(matchedcities.length == 0) {
            CITY = lastmatchedcities[0]
        } else if (i == rawcityname.toLowerCase().split('').length - 1) {
            CITY = matchedcities[0];
        } else {
            lastmatchedcities = matchedcities;
        }
        // if (matchedcities.length == 1) {
        //   CITY = matchedcities[0];
        // } else {
        //   CITY = matchedcities.filter(
        //     x => x.toLowerCase() == rawcityname.toLowerCase(),
        //   );
        // }
      });
    // console.log(matchedcities, CITY);
    return CITY;
  };
  const extractUserDetails = l => {
    let details = {
      firstname: '',
      lastname: '',
      dob: '',
      address: '',
      city: '',
    };
    let date1Regex =
      /(0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])[\/\-]\d{4}/g;
    let date2Regex =
      /(0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])[\/\-]\d{2}/g;
    let date1 = [],
      date2 = [];
    let cityrgx = new RegExp(/.+?(?=, AZ)/g);
    l.forEach((a, ai) => {
      if (a.match(date1Regex)) {
        date1 = [...date1, ...a.match(date1Regex)];
      }
      if (a.match(date2Regex)) {
        date2 = [...date2, ...a.match(date2Regex)];
      }
    });
    date1.forEach(d => {
      let isBirthday = false;
      let dregex = new RegExp('^(' + d.slice(0, 6) + ')(' + d.slice(-2) + ')$');
      date2.forEach(d2 => {
        isBirthday = isBirthday || dregex.test(d2);
      });
      if (isBirthday) {
        details.dob = d;
      }
    });
    let az_index = l.findIndex(x => x.toLowerCase().includes('az'));
    let name_address = l[az_index].split('\n');
    name_address = l[az_index]
      .split('\n')
      .slice(
        0,
        l[az_index].split('\n').findIndex(x => x.toLowerCase().includes('az')) +
          1,
      ).slice(-4);
    if (name_address.length < 4) {
      name_address = [
        ...extract_name_address(l, az_index - 1, 4 - name_address.length),
        ...name_address,
      ];
    }
    console.log(name_address)
    details.firstname = name_address[1].replace(/(2 )|(2)/g, '');
    details.lastname = name_address[0].replace(/(1 )|(1)/g, '');
    details.city = getcityname(name_address[3].match(cityrgx)[0]);
    details.address = name_address[2].replace(/^8 /, '') + ", " + name_address[3].replace(cityrgx, details.city);
    console.log('First Name: ' + details.firstname);
    console.log('Last Name : ' + details.lastname);
    console.log('Address   : ' + details.address);
    console.log('City      : ' + details.city);
    console.log('DOB       : ' + details.dob);

    return details;
  };
  const extract_name_address = (l, index, rest_length) => {
    console.log(l, index, rest_length)
    let rest = l[index].split('\n').slice(-1 * rest_length);
    if (rest.length < rest_length) {
      rest = [
        ...extract_name_address(l, index - 1, rest_length - rest.length),
        ...rest,
      ];
    }
    return rest;
  };

  const extract = () => {
    let index = document.getElementById("extract").value
    // console.log("clicked", +index)
    extractUserDetails(arr[index])
  }


  zipcode - 99549